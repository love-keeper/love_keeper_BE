name: LOVEKEEPER-DEV CI CD

on:
  push:
    branches: [ "develop" ]

permissions:
  id-token: write
  contents: read

env:
  ECR_REPOSITORY: dev/lovekeeper
  ECS_SERVICE: lovekeeper-dev-task-service
  ECS_CLUSTER: lovekeeper-dev-cluster
  CONTAINER_NAME: lovekeeper-dev-container
  ECS_TASK_DEFINITION: ./task-definition.json
  AWS_REGION: ap-northeast-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Firebase 서비스 계정 파일 생성
      - name: Create Firebase service account file
        run: |
          mkdir -p src/main/resources
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > src/main/resources/firebase-service-account.json

      # Gradle 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradlew 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Task Definition 파일 생성
      - name: Create Task Definition file
        run: |
          echo '${{ secrets.TASK_DEFINITION_DEV }}' > task-definition.json

      # AWS 로그인
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          role-session-name: LoveKeeperDevSessionName
          aws-region: ${{ env.AWS_REGION }}

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Docker 이미지 빌드, 태그, 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # ECR에 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # 이미지 URI 출력
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Task Definition에 새 이미지 ID 설정
      - name: Fill in the new image ID in the Amazon ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # ECS에 태스크 정의 배포
      - name: Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true