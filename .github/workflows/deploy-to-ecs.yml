name: Deploy to ECS

on:
  push:
    branches:
      - main      # 릴리스 환경
      - develop   # 개발 환경
      - ci/setting # 현재 작업 브랜치
  workflow_dispatch:  # 수동 실행 옵션

env:
  AWS_REGION: ap-northeast-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      - name: Build with Gradle (skip tests for now)
        run: ./gradlew build -x test
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=release" >> $GITHUB_OUTPUT
            echo "environment_short=rel" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "environment_short=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.set-env.outputs.environment }}-lovekeeper
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드 및 태그 설정
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # ECR에 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # 이미지 URI를 출력으로 설정
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ steps.set-env.outputs.environment }}-cluster \
                                --service ${{ steps.set-env.outputs.environment }}-service \
                                --force-new-deployment \
                                --region ${{ env.AWS_REGION }}
      
      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ steps.set-env.outputs.environment }}-cluster \
            --services ${{ steps.set-env.outputs.environment }}-service \
            --region ${{ env.AWS_REGION }}
      
      - name: Deployment result
        run: |
          echo "Deployment to ${{ steps.set-env.outputs.environment }} environment completed successfully!"
          echo "Application is available at https://${{ steps.set-env.outputs.environment_short }}.lovekeeper.site"
