name: LoveKeeper CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY_DEV: dev-lovekeeper
  ECR_REPOSITORY_PROD: release-lovekeeper
  ECS_CLUSTER_DEV: dev-cluster
  ECS_CLUSTER_PROD: release-cluster
  ECS_SERVICE_DEV: dev-service
  ECS_SERVICE_PROD: release-service
  ECS_TASK_DEFINITION_DEV: dev-task
  ECS_TASK_DEFINITION_PROD: release-task
  CONTAINER_NAME_DEV: dev-container
  CONTAINER_NAME_PROD: release-container

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew test
  
  build:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      image: ${{ steps.build-image.outputs.image }}
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set ECR repository based on environment
        id: set-ecr
        run: |
          if [[ "${{ steps.set-env.outputs.environment }}" == "prod" ]]; then
            echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY_PROD }}" >> $GITHUB_ENV
            echo "CONTAINER_NAME=${{ env.CONTAINER_NAME_PROD }}" >> $GITHUB_ENV
          else
            echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY_DEV }}" >> $GITHUB_ENV
            echo "CONTAINER_NAME=${{ env.CONTAINER_NAME_DEV }}" >> $GITHUB_ENV
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ needs.build.outputs.environment }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        id: download-task
        run: |
          if [[ "${{ needs.build.outputs.environment }}" == "prod" ]]; then
            aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_PROD }} --query taskDefinition > task-definition.json
            echo "ECS_CLUSTER=${{ env.ECS_CLUSTER_PROD }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ env.ECS_SERVICE_PROD }}" >> $GITHUB_ENV
            echo "CONTAINER_NAME=${{ env.CONTAINER_NAME_PROD }}" >> $GITHUB_ENV
          else
            aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_DEV }} --query taskDefinition > task-definition.json
            echo "ECS_CLUSTER=${{ env.ECS_CLUSTER_DEV }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ env.ECS_SERVICE_DEV }}" >> $GITHUB_ENV
            echo "CONTAINER_NAME=${{ env.CONTAINER_NAME_DEV }}" >> $GITHUB_ENV
          fi

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deployment Status
        if: always()
        run: |
          if [[ "${{ needs.build.outputs.environment }}" == "prod" ]]; then
            echo "✅ Production deployment completed. Site accessible at https://prod.lovekeeper.site"
          else
            echo "✅ Development deployment completed. Site accessible at https://dev.lovekeeper.site"
          fi
