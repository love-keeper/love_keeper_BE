name: CI/CD Pipeline

on:
  push:
    branches:
      - 'develop'
      - 'release'
  pull_request:
    branches:
      - 'develop'
      - 'release'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Run tests
        run: ./gradlew test

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: build/libs/*.jar
          retention-days: 1

  deploy:
    name: Deploy to AWS
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/release')

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: build/libs

      - name: Set up environment variables
        id: vars
        run: |
          if [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_OUTPUT
            echo "ECR_REPOSITORY_NAME=lovekeeper-app" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=dev" >> $GITHUB_OUTPUT
            echo "ECS_CLUSTER=lovekeeper-dev" >> $GITHUB_OUTPUT
            echo "ECS_SERVICE=lovekeeper-dev" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == 'refs/heads/release' ]]; then
            echo "ENVIRONMENT=release" >> $GITHUB_OUTPUT
            echo "ECR_REPOSITORY_NAME=lovekeeper-app" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=release" >> $GITHUB_OUTPUT
            echo "ECS_CLUSTER=lovekeeper-release" >> $GITHUB_OUTPUT
            echo "ECS_SERVICE=lovekeeper-release" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.vars.outputs.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create new task definition with port 8082
        run: |
          cat > task-definition.json << 'EOF'
          {
            "family": "lovekeeper-dev",
            "executionRoleArn": "arn:aws:iam::065301655985:role/lovekeeper-dev-ecs-execution-role",
            "taskRoleArn": "arn:aws:iam::065301655985:role/lovekeeper-dev-ecs-task-role",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "app",
                "image": "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8082,
                    "hostPort": 8082
                  }
                ],
                "environment": [
                  {
                    "name": "SPRING_PROFILES_ACTIVE",
                    "value": "${ENVIRONMENT}"
                  },
                  {
                    "name": "SPRING_DATASOURCE_URL",
                    "value": "jdbc:mysql://lovekeeper-${ENVIRONMENT}-db.c1o2w0c24kkq.ap-northeast-2.rds.amazonaws.com:3306/lovekeeper_${ENVIRONMENT}?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8"
                  },
                  {
                    "name": "SPRING_DATASOURCE_USERNAME",
                    "value": "admin"
                  },
                  {
                    "name": "SPRING_REDIS_HOST",
                    "value": "lovekeeper-${ENVIRONMENT}-redis.futq6r.0001.apn2.cache.amazonaws.com"
                  },
                  {
                    "name": "SPRING_REDIS_PORT",
                    "value": "6379"
                  },
                  {
                    "name": "SERVER_PORT",
                    "value": "8082"
                  }
                ],
                "secrets": [
                  {
                    "name": "SPRING_DATASOURCE_PASSWORD",
                    "valueFrom": "arn:aws:secretsmanager:ap-northeast-2:065301655985:secret:lovekeeper/${ENVIRONMENT}/db-password-Ea4nKU"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/lovekeeper-${ENVIRONMENT}",
                    "awslogs-region": "ap-northeast-2",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": [
              "FARGATE"
            ],
            "cpu": "512",
            "memory": "1024",
            "runtimePlatform": {
              "cpuArchitecture": "X86_64",
              "operatingSystemFamily": "LINUX"
            }
          }
          EOF
          envsubst < task-definition.json > task-definition-final.json
          aws ecs register-task-definition --cli-input-json file://task-definition-final.json

      - name: Update ECS service with force new deployment
        run: |
          aws ecs update-service \
            --cluster ${{ steps.vars.outputs.ECS_CLUSTER }} \
            --service ${{ steps.vars.outputs.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for the service to be stable
        run: |
          aws ecs wait services-stable \
            --cluster ${{ steps.vars.outputs.ECS_CLUSTER }} \
            --services ${{ steps.vars.outputs.ECS_SERVICE }}

  notify:
    name: Notify Deployment Status
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Notify success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: ':rocket: Successfully deployed ${{ github.ref }} to AWS ECS!'
          SLACK_FOOTER: 'GitHub Actions'